1. 安装完成后，还需要最后一步设置，在命令行输入：
	$ git config --global user.name "Your Name"
	$ git config --global user.email "email@example.com"
2. 创建版本库
	git init	命令把这个目录变成Git可以管理的仓库：
	git add 	把文件添加到仓库:	"git add readme.txt"
	git commit	把文件提交到仓库:	"git commit -m "wrote a readme file""
	git status	查看当前仓库的状态
	git differ	查看difference	"git diff readme.txt "
	git log		查看日志
	git log --pretty=oneline 单行显示
3. 版本回退
	在Git中，用 HEAD 表示当前版本， 
	上一个版本就是 HEAD^，
	上上一个版本就是 HEAD^^
	往上100个版本写100个^比较容易数不过来，所以写成 HEAD~100
	
	git reset --hard commit_id
	git reset --hard HEAD^	回退上一个版本
	git reflog				记录你的每一次命令

4. 撤销修改
	git checkout -- readme.txt 意思就是，把readme.txt文件在工作区的修改全部撤销， 这里有两种情况：
	一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
	一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
	
	git reset HEAD file  可以把暂存区的修改撤销掉（unstage），重新放回工作区：
	git reset 命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。

5. 删除
	git rm 删除一个文件
	git checkout 其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
	
6. 远程仓库
	第1步：创建SSH Key。
		ssh-keygen -t rsa。 //id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
	第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
	然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：

7. 添加远程库 
	先有本地库，后有远程库
	1.	根据GitHub的提示，在本地的仓库下运行命令：
		$ git remote add origin git@github.com:MyJxl/test.git
		添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。
	2.	把本地库的所有内容推送到远程库上
	
		$ git push -u origin master		
			//实际上是把当前分支master推送到远程。
			//由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送到远程新的master分支，
			//还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
		
		$ git push origin master //此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
		
	
	先创建远程库，然后，从远程库克隆。
	1.  git clone git@github.com:MyJxl/test.git

8. 分支管理
	查看分支：git branch

	创建分支：git branch <name>

	切换分支：git checkout <name>

	创建+切换分支：git checkout -b <name>

	合并某分支到当前分支：git merge <name>

	删除分支：git branch -d <name>
	
	git log --graph --pretty=oneline --abbrev-commit	//带参数的git log也可以看到分支的合并情况：
	git log --graph										//分支合并图
	
	git merge --no-ff -m "merge with no-ff" dev
	//合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
	
	$ git stash // 把当前工作现场“储藏”起来，等以后恢复现场后继续工作：
		恢复现场
		一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；

		另一种方式是用git stash pop，恢复的同时把stash内容也删了：
	git stash list 查看
	
	$ git stash apply stash@{0}   // 你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash
	
	如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
	
	$ git remote 					//要查看远程库的信息
	$ git remote -v					//显示更详细的信息：
	$ git push origin master		//推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上
	
	
	多人协作的工作模式通常是这样：

		首先，可以试图用git push origin branch-name推送自己的修改；

		如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

		如果合并有冲突，则解决冲突，并在本地提交；

		没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

		如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
		
	小结

		查看远程库信息，使用git remote -v；

		本地新建的分支如果不推送到远程，对其他人就是不可见的；

		从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

		在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

		建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

		从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
		
9. 标签管理
	git tag <name> 用于新建一个标签，默认为HEAD，也可以指定一个commit id；

	git tag -a <tagname> -m "blablabla..."可以指定标签信息；

	git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；

	命令git tag可以查看所有标签。
	git show <tagname> 查看标签信息
	
	命令git push origin <tagname>可以推送一个本地标签；

	命令git push origin --tags可以推送全部未推送过的本地标签；

	命令git tag -d <tagname>可以删除一个本地标签；

	命令git push origin :refs/tags/<tagname>可以删除一个远程标签。

10. 自定义git
	 git config --global color.ui true  //让Git显示颜色
	 在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。
	 
	 git check-ignore
	 
	 $ git check-ignore -v App.class
	 
	 配置别名：
		$ git config --global alias.st status
		git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
	.gitignore:3:*.class    App.class